defmodule Prime do

    @number 7777731073919171
    @number2  7355573
    @cores :erlang.system_info(:logical_processors_available)

    @matrix4x4 2727344827935482 # 0.52 seconds
    @matrix5x5 2216734827935482546294839 #
    @matrix6x6 2785634802635482546294839458301728 #
    @matrix7x7 2785634827935482546294839851424590627421590453194 #
    @matrix10x10 2216734827935482546294839221673482793548254629483922167348279354825462948392216734827935482546294839 # 0.64 seconds
    @matrix45x
    #Prime tried

    #Prime found

    def time(num) do
        Process.flag(:trap_exit, true)
        {algo, val} = :timer.tc(fn -> tod(num) end)
        algo = algo/1000000
        IO.inspect {"Time in seconds: ",algo,val}
    end

    def tod(num) do
        Process.register(self(), :main)
        cond do
            rem(num,2) == 0 -> cond do
                                   String.ends_with?(Integer.to_string(num+1),"5") -> principal(num+3)
                                   true -> principal(num+1)
                                end
            String.ends_with?(Integer.to_string(num),"5") -> principal(num+2)
            true -> principal(num)
        end
    end

    def principal(num) do
        Process.flag(:trap_exit, true)
        pid = spawn_link(fn -> Fast.main(num, 10, @cores) end)
        receive do
            {:prime, num2} -> IO.inspect {:prime,num2};if Process.alive?(pid) == true do Process.exit(pid, :kill) end;Process.unregister(:main);Process.exit(self(), :normal)
        end
    end
end